buildscript {
    ext {
        springBootVersion = '2.0.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

plugins {
    id 'java'

}
configurations {
    provided
}
sourceSets {
    main.compileClasspath += configurations.provided
    test.compileClasspath += configurations.provided
    test.runtimeClasspath += configurations.provided
}

apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'application'


version '1.0-SNAPSHOT'

sourceCompatibility = 1.9

mainClassName = 'Server.Main'

repositories {
    jcenter()
    mavenCentral()
}

ext {
    vaadinVersion = '8.4.3'
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.12'
    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version: '8.5.31'
    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '8.5.31'
    compile('org.springframework.boot:spring-boot-starter-web')
    compile('org.springframework:spring-webmvc:5.0.1.RELEASE')
    compile('com.vaadin:vaadin-spring-boot-starter')
    compile("org.springframework.boot:spring-boot-starter-data-mongodb")
    compile group: 'com.google.code.gson', name: 'gson', version: '1.7.2'
    compile group: 'org.mongodb', name: 'mongo-java-driver', version: '2.12.3'
    provided group: 'javax.servlet', name: 'javax.servlet-api', version: '3.0.1'
    provided group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.0'
    provided group: 'javax.servlet', name: 'jsp-api', version: '2.0'

}

dependencies {
    compile group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.11.0'
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.11.0'
    compile 'org.slf4j:slf4j-log4j12:1.7.18'
}

dependencyManagement {
    imports {
        mavenBom "com.vaadin:vaadin-bom:${vaadinVersion}"
    }
}

jar{
    archiveName = 'testTask.jar'

    manifest {
        attributes 'Main-Class': 'Server.Main',
                'Class-Path': configurations.runtime.files.collect { "lib/$it.name" }.join(' '),
                'Implementation-Version': project.version
    }

    from(configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }) {}
}